{"version":3,"file":"static/js/189.d4119519.chunk.js","mappings":"oLACA,SAAgB,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,OAAS,wBAAwB,cAAgB,+BAA+B,SAAW,2B,sBCI5N,MAiBA,EAjBoBA,IAGZC,EAAAA,EAAAA,KAAA,OAAKC,UAAWC,EAAMC,OAAOC,UAEzBC,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACIJ,EAAAA,EAAAA,KAAA,OAAKM,IAAKP,EAAMQ,MAAOC,IAAK,cAC5BR,EAAAA,EAAAA,KAACS,EAAAA,GAAO,CACJC,GAAE,YAAAC,OAAcZ,EAAMa,IAAKR,SAC1BL,EAAMc,YCF3B,EATqBd,IAEbC,EAAAA,EAAAA,KAAA,OACIC,UAAWC,EAAMY,QAAQV,SACxBL,EAAMe,U,wCCAnB,MAAMC,GAAcC,EAAAA,EAAAA,GAAiB,IAE/BC,EAAmBC,EAAAA,KAAaC,MAAM,CACxCC,UAAWF,EAAAA,KAAaG,SAAS,YAAYC,IAAI,GAAI,mCA8BzD,EA3BqBvB,IAEbC,EAAAA,EAAAA,KAACuB,EAAAA,GAAM,CACHC,cAAe,CAACJ,UAAW,IAC3BH,iBAAkBA,EAClBQ,SAAUA,CAACC,EAAMC,KAAmB,IAAjB,UAACC,GAAUD,EAC1B5B,EAAM0B,SAASC,GACfE,GAAW,EACbxB,SAEDyB,IAAA,IAAC,aAACC,GAAaD,EAAA,OACZxB,EAAAA,EAAAA,MAAC0B,EAAAA,GAAI,CAACN,SAAUK,EAAa1B,SAAA,EACzBJ,EAAAA,EAAAA,KAAA,OAAAI,UACIJ,EAAAA,EAAAA,KAACgC,EAAAA,GAAK,CACFnB,KAAK,YACLoB,YAAY,qBACZC,UAAWC,EAAAA,GACXC,SAAU,CAACf,EAAAA,EAAUN,QAG7Bf,EAAAA,EAAAA,KAAA,UAAQqC,KAAK,SAAQjC,SAAC,mBACnB,ICOvB,EAlCiBL,IAEb,MAAMuC,EAAkBvC,EAAMwC,QACzBC,KAAIrC,IAAWH,EAAAA,EAAAA,KAACyC,EAAU,CAEvB5B,KAAMV,EAAOU,KACbD,GAAIT,EAAOS,GACXL,MAAOJ,EAAOI,OAHTJ,EAAOS,MAKd8B,EAAkB3C,EAAM4C,SACzBH,KAAI1B,IAAYd,EAAAA,EAAAA,KAAC4C,EAAW,CACC9B,QAASA,EAAQA,SADZA,EAAQF,MAQ/C,OACIP,EAAAA,EAAAA,MAAA,OACIJ,UAAWC,EAAMqC,QAAQnC,SAAA,EACzBJ,EAAAA,EAAAA,KAAA,OACIC,UAAWC,EAAM2C,aAAazC,SAC7BkC,KAELjC,EAAAA,EAAAA,MAAA,OACIJ,UAAWC,EAAM4C,cAAc1C,SAAA,CAC9BsC,GACD1C,EAAAA,EAAAA,KAAC+C,EAAW,CAACtB,SAdPuB,IACdjD,EAAMkD,WAAWD,EAAS5B,UAAU,SAgB9B,E,aC/Bd,MAgBa8B,GAAmBC,EAAAA,EAAAA,KAC5BC,EAAAA,EAAAA,KAjBqBC,IACd,CACHd,QAASc,EAAMC,WAAWf,QAC1BI,SAAUU,EAAMC,WAAWX,SAC3BY,OAAQF,EAAMG,KAAKD,WAICE,IACjB,CACHR,WAAaD,IACTS,GAASC,EAAAA,EAAAA,GAAwBV,GAAU,MAOnDW,EAAAA,EAF4BR,CAG9BS,E,sECtBF,MAAMC,EAAmBR,IAAK,CAC1BE,OAAQF,EAAMG,KAAKD,SAGVI,EAAoBG,IAE7B,MAAMC,UAA0BC,EAAAA,UAC5BC,MAAAA,GACI,OAAKC,KAAKnE,MAAMwD,QAETvD,EAAAA,EAAAA,KAAC8D,EAAU,IAAKI,KAAKnE,SAFGC,EAAAA,EAAAA,KAACmE,EAAAA,GAAQ,CAACzD,GAAI,UAGjD,EAKJ,OAFqC0C,EAAAA,EAAAA,IAAQS,EAART,CAAyBW,EAEzB,C","sources":["webpack://react-kabzda/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/DialogItem/DialogItem.jsx","components/Dialogs/MessageItem/MessageItem.jsx","components/Dialogs/DialogsForm.jsx","components/Dialogs/Dialogs.jsx","components/Dialogs/DialogsContainer.jsx","hoc/withAuthRedirect.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__dkLPe\",\"dialogsItems\":\"Dialogs_dialogsItems__xZ8rj\",\"dialog\":\"Dialogs_dialog__DNQAw\",\"active\":\"Dialogs_active__8ryUL\",\"messagesItems\":\"Dialogs_messagesItems__F1V5c\",\"messages\":\"Dialogs_messages__b7MTZ\"};","import React from 'react';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nimport style from \"../Dialogs.module.css\";\r\n\r\nconst DialogItem = (props) => {\r\n\r\n    return (\r\n        <div className={style.dialog}>\r\n\r\n            <div>\r\n                <img src={props.image} alt={'avatarka'}/>\r\n                <NavLink\r\n                    to={`/dialogs/${props.id}`}>\r\n                    {props.name}\r\n                </NavLink>\r\n            </div>\r\n        </div>\r\n    )\r\n        ;\r\n};\r\n\r\nexport default DialogItem;","import React from 'react';\r\nimport style from \"../Dialogs.module.css\";\r\n\r\nconst MessageItem = (props) => {\r\n    return (\r\n        <div\r\n            className={style.message}>\r\n            {props.message}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default MessageItem;","import React from 'react';\r\nimport {Field, Form, Formik} from \"formik\";\r\nimport * as Yup from \"yup\";\r\n\r\nimport {Textarea} from \"../../common/FormControls/FormControls\";\r\nimport {maxLengthCreator, required} from \"../../utils/validators/validators\";\r\n\r\nconst maxLength50 = maxLengthCreator(50);\r\n\r\nconst validationSchema = Yup.object().shape({\r\n    myMessage: Yup.string().required('Required').max(50, 'Must be 50 characters or less'),\r\n});\r\n\r\nconst DialogsForm = (props) => {\r\n    return (\r\n        <Formik\r\n            initialValues={{myMessage: ''}}\r\n            validationSchema={validationSchema}\r\n            onSubmit={(values, {resetForm}) => {\r\n                props.onSubmit(values);\r\n                resetForm();\r\n            }}\r\n        >\r\n            {({handleSubmit}) => (\r\n                <Form onSubmit={handleSubmit}>\r\n                    <div>\r\n                        <Field\r\n                            name=\"myMessage\"\r\n                            placeholder=\"Write your message\"\r\n                            component={Textarea}\r\n                            validate={[required, maxLength50]}\r\n                        />\r\n                    </div>\r\n                    <button type=\"submit\">Send message</button>\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    );\r\n};\r\n\r\nexport default DialogsForm;\r\n","import React from \"react\";\r\n\r\nimport style from './Dialogs.module.css'\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport MessageItem from \"./MessageItem/MessageItem\";\r\nimport DialogsForm from \"./DialogsForm\";\r\n\r\nconst Dialogs = (props) => {\r\n\r\n    const dialogsElements = props.dialogs\r\n        .map(dialog => (<DialogItem\r\n            key={dialog.id}\r\n            name={dialog.name}\r\n            id={dialog.id}\r\n            image={dialog.image}/>));\r\n\r\n    const messageElements = props.messages\r\n        .map(message => (<MessageItem key={message.id}\r\n                                      message={message.message}/>))\r\n\r\n\r\n    const onSubmit = (formData) => {\r\n        props.addMessage(formData.myMessage)\r\n    }\r\n\r\n    return (\r\n        <div\r\n            className={style.dialogs}>\r\n            <div\r\n                className={style.dialogsItems}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div\r\n                className={style.messagesItems}>\r\n                {messageElements}\r\n                <DialogsForm onSubmit={onSubmit}/>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\nexport default Dialogs;","import {compose} from \"redux\";\r\nimport {connect} from \"react-redux\";\r\n\r\nimport {addMessageActionCreator} from \"../../redux/dialog-reducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        dialogs: state.dialogPage.dialogs,\r\n        messages: state.dialogPage.messages,\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        addMessage: (formData) => {\r\n            dispatch(addMessageActionCreator(formData))\r\n        }\r\n    }\r\n}\r\n\r\nexport const DialogsContainer = compose(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect\r\n)(Dialogs)\r\n\r\n","import {Navigate} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {Component} from \"react\";\r\n\r\nconst mapStateToProps = (state) => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport const withAuthRedirect = (ComponentA) => {\r\n\r\n    class RedirectComponent extends Component {\r\n        render() {\r\n            if (!this.props.isAuth) return <Navigate to={'/login'}/>\r\n\r\n            return <ComponentA {...this.props}/>\r\n        }\r\n    }\r\n\r\n    let ConnectedAuthRedirectComponent = connect(mapStateToProps)(RedirectComponent)\r\n\r\n    return ConnectedAuthRedirectComponent;\r\n}\r\n\r\n"],"names":["props","_jsx","className","style","dialog","children","_jsxs","src","image","alt","NavLink","to","concat","id","name","message","maxLength50","maxLengthCreator","validationSchema","Yup","shape","myMessage","required","max","Formik","initialValues","onSubmit","values","_ref","resetForm","_ref2","handleSubmit","Form","Field","placeholder","component","Textarea","validate","type","dialogsElements","dialogs","map","DialogItem","messageElements","messages","MessageItem","dialogsItems","messagesItems","DialogsForm","formData","addMessage","DialogsContainer","compose","connect","state","dialogPage","isAuth","auth","dispatch","addMessageActionCreator","withAuthRedirect","Dialogs","mapStateToProps","ComponentA","RedirectComponent","Component","render","this","Navigate"],"sourceRoot":""}